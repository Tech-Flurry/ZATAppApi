<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZATAppApi</name>
    </assembly>
    <members>
        <member name="T:ZATAppApi.ApiModels.RiderApiModel">
            <summary>
            A user of the System who books the ride and does related tasks
            </summary>
        </member>
        <member name="P:ZATAppApi.ApiModels.RiderApiModel.FullName">
            <summary>
            Full Name of the rider
            </summary>
        </member>
        <member name="P:ZATAppApi.ApiModels.RiderApiModel.CountryCode">
            <summary>
            Country Code of the Contact Number
            </summary>
        </member>
        <member name="P:ZATAppApi.ApiModels.RiderApiModel.CompanyCode">
            <summary>
            Company Code of the Contact Number
            </summary>
        </member>
        <member name="P:ZATAppApi.ApiModels.RiderApiModel.Number">
            <summary>
            Number of the Contact Number
            </summary>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.DriversController.Get(System.Int64)">
            <summary>
            Action to get information of a driver 
            </summary>
            <param name="id">Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.DriversController.ChangePassword(System.Int64,System.String,System.String)">
            <summary>
            Action to change the password for a driver
            </summary>
            <param name="id">Primary Key</param>
            <param name="oldPassword">Old Password</param>
            <param name="newPassword">New Password</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.DriversController.MatchCredentials(System.Int64,System.String,System.String)">
            <summary>
            Action to check the driver's credentials
            </summary>
            <param name="id">Primary Key</param>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.DriversController.GetAllMobileTransactions(System.Int64)">
            <summary>
            Action to get all mobile account transactions done by the driver
            </summary>
            <param name="id">Primary Key for Driver</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.DriversController.GetAllManualTransactions(System.Int64)">
            <summary>
            Action to get all mobile account transactions done by the driver
            </summary>
            <param name="id">Primary Key for Driver</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.DriversController.GetCompletedRides(System.Int64)">
            <summary>
            Action to get All Rides Completed by the Driver
            </summary>
            <param name="id">Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.DriversController.GetRatingAndComments(System.Int64)">
            <summary>
            Action which will return Ratings and comments relating to the driver
            </summary>
            <param name="id">Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.DriversController.GetVehicle(System.Int64)">
            <summary>
            Action to get the vehicle details of the driver
            </summary>
            <param name="id">Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.DriversController.MakeMobileTransaction(System.Int64,System.String,System.String,System.Decimal)">
            <summary>
            Action to make a transaction via mobile account
            </summary>
            <param name="id">Primary Key</param>
            <param name="refNumber">Reference Number of the transaction (Provided by the Mobile Account Service)</param>
            <param name="mobileAccountService">Mobile Account Service Provider Name</param>
            <param name="amount">Amount of transaction</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.DriversController.PickUpRide(System.Int64,System.Int64,ZATApp.Models.Common.Location)">
            <summary>
            Action to be used to pick up a ride by the driver from a particular point
            </summary>
            <param name="id">Pirmary Key</param>
            <param name="rideId">Primary Key for the ride to be picked up</param>
            <param name="pickUpLocation">Location from where is the ride is being picked up</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.RidersController.Get(System.Int64)">
            <summary>
            Action returns the information about a rider in the Database
            </summary>
            <param name="id">Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.RidersController.Post(ZATAppApi.ApiModels.RiderApiModel)">
            <summary>
            Adds a new rider to the system
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.RidersController.ChangeRiderActiveStatus(System.Int64,System.Boolean)">
            <summary>
            Action called if there is need to change the active status of the rider
            </summary>
            <param name="id">Primary Key</param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.RidersController.BookRide(System.Int64,System.Int32,ZATApp.Models.Ride.RideBookingDetails)">
            <summary>
            Action to be called to book a new ride for a rider
            </summary>
            <param name="id">Primary Key</param>
            <param name="vehicleTypeId">Id of the vehicle type for which the ride is being booked</param>
            <param name="rideDetails">Details about the ride</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.RidersController.RateDriver(System.Int64,System.Int64,ZATApp.Models.Common.RatingAndComments)">
            <summary>
            Action to Rate a driver after the completion of the ride
            </summary>
            <param name="riderId">Primary Key of the Rider</param>
            <param name="driverId">Primary Key of the Driver</param>
            <param name="rating"></param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.RidersController.GetReceivedSms(System.Int64)">
            <summary>
            Action to get the sms's received by the rider
            </summary>
            <param name="id">Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.RidersController.GetCompletedRides(System.Int64)">
            <summary>
            Action to get the rides completed by the rider
            </summary>
            <param name="id">Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.RidesController.Get(System.Int64)">
            <summary>
            Action to get information of the ride
            </summary>
            <param name="id">Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.RidesController.AddRoute(System.Int64,ZATApp.Models.Common.Location)">
            <summary>
            Action to add cordinates to the route of a ride
            </summary>
            <param name="id">Primary Key</param>
            <param name="cordinates">Location cordinates of the position</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.RidesController.AddPromo(System.Int64,System.String)">
            <summary>
            Action to add a promo code to the ride
            </summary>
            <param name="id">Primary Key</param>
            <param name="code">Promo Code</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.RidesController.CancelRide(System.Int64)">
            <summary>
            Action will be called to cancel a ride
            </summary>
            <param name="id">Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.RidesController.EndRide(System.Int64,ZATApp.Models.Common.Location)">
            <summary>
            Action will be called to end a ride 
            </summary>
            <param name="id">Primary Key</param>
            <param name="dropOffLocation">Location Point at which the ride is ended</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.RidesController.GetPaymentSummary(System.Int64)">
            <summary>
            Action to be called to get the payment summary of the ride
            </summary>
            <param name="id">Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.RidesController.Pay(System.Int64)">
            <summary>
            Action will be called to pay for the ride
            </summary>
            <param name="id">Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.RidesController.TransferRide(System.Int64)">
            <summary>
            Action will perform a transfer ride method
            </summary>
            <param name="id">Primary Key</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.ApiControllers.RidesController.EstimateFare(System.Decimal,System.Int32)">
            <summary>
            Action will send the Fare Estimation as a response
            </summary>
            <param name="distance">Distance in meters</param>
            <param name="vehicleTypeId">Primary Key of the vehicle type</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.DriversController.Index(System.Nullable{System.Int32})">
            <summary>
            Index method of Drivers controller which will return a list of drivers registered with the system
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.DriversController.ViewDetails(System.Int64)">
            <summary>
            Action to return the Details about a driver
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.DriversController.Block(System.Int64)">
            <summary>
            Action to block a driver
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.TransactionsController.GetUnverifiedTransactionsCount">
            <summary>
            Method to be called by using AJAX to getting UI updated
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.TransactionsController.ViewUnverifiedTransactions(System.Nullable{System.Int32})">
            <summary>
            Method to show a list of unverified transactions in the system
            </summary>
            <param name="page">Page Number us to do paging</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.TransactionsController.VerifyTransaction(System.Int64)">
            <summary>
            Action to be called through AJAX whenever there's a click on Verify button on verify transaction page
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ZATAppApi.Controllers.TransactionsController.ReceivePayment">
            <summary>
            Returns the view with the form to receive manual payment
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.TransactionsController.ReceivePayment(ZATApp.ViewModels.ReceivePaymentViewModel)">
            <summary>
            Action to be called on form submission of receive payment method
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.TransactionsController.ViewAllMobilePayments(System.Nullable{System.Int32})">
            <summary>
            Action to return a list of Mobile Transactions over the time
            </summary>
            <param name="page">Page number used in pagging</param>
            <returns></returns>
        </member>
        <member name="M:ZATAppApi.Controllers.TransactionsController.ViewAllManualPayments(System.Nullable{System.Int32})">
            <summary>
            Action returns a list of Manual Transactions
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:ZATApp.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:ZATApp.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForMediaType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Sets the sample directly for all actions with the specified media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,ZATApp.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageConfigurationExtensions.GetModelDescriptionGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the model description generator.
            </summary>
            <param name="config">The configuration.</param>
            <returns>The <see cref="T:ZATApp.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator"/></returns>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:ZATApp.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:ZATApp.Areas.HelpPage.ModelDescriptions.ModelDescription">
            <summary>
            Describes a type model.
            </summary>
        </member>
        <member name="T:ZATApp.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator">
            <summary>
            Generates model descriptions for given types.
            </summary>
        </member>
        <member name="T:ZATApp.Areas.HelpPage.ModelDescriptions.ModelNameAttribute">
            <summary>
            Use this attribute to change the name of the <see cref="T:ZATApp.Areas.HelpPage.ModelDescriptions.ModelDescription"/> generated for a type.
            </summary>
        </member>
        <member name="T:ZATApp.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZATApp.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:ZATApp.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.Models.HelpPageApiModel.UriParameters">
            <summary>
            Gets or sets the <see cref="T:ZATApp.Areas.HelpPage.ModelDescriptions.ParameterDescription"/> collection that describes the URI parameters for the API.
            </summary>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.Models.HelpPageApiModel.RequestDocumentation">
            <summary>
            Gets or sets the documentation for the request.
            </summary>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.Models.HelpPageApiModel.RequestModelDescription">
            <summary>
            Gets or sets the <see cref="T:ZATApp.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the request body.
            </summary>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.Models.HelpPageApiModel.RequestBodyParameters">
            <summary>
            Gets the request body parameter descriptions.
            </summary>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.Models.HelpPageApiModel.ResourceDescription">
            <summary>
            Gets or sets the <see cref="T:ZATApp.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the resource.
            </summary>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.Models.HelpPageApiModel.ResourceProperties">
            <summary>
            Gets the resource property descriptions.
            </summary>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:ZATApp.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZATApp.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories">
            <summary>
            Gets factories for the objects that the supported formatters will serialize as samples. Processed in order,
            stopping when the factory successfully returns a non-<see langref="null"/> object.
            </summary>
            <remarks>
            Collection includes just <see cref="M:ZATApp.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)"/> initially. Use
            <code>SampleObjectFactories.Insert(0, func)</code> to provide an override and
            <code>SampleObjectFactories.Add(func)</code> to provide a fallback.</remarks>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,ZATApp.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,ZATApp.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create
            one using <see cref="M:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.DefaultSampleObjectFactory(ZATApp.Areas.HelpPage.HelpPageSampleGenerator,System.Type)"/> (which wraps an <see cref="T:ZATApp.Areas.HelpPage.ObjectGenerator"/>) and other
            factories in <see cref="P:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.ResolveHttpRequestMessageType(System.Web.Http.Description.ApiDescription)">
            <summary>
            Resolves the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},ZATApp.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="T:ZATApp.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a new <see cref="T:ZATApp.Areas.HelpPage.HelpPageSampleKey"/> based on media type.
            </summary>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:ZATApp.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageSampleKey.#ctor(ZATApp.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:ZATApp.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:ZATApp.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:ZATApp.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,ZATApp.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:ZATApp.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:ZATApp.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:ZATApp.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:ZATApp.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:ZATApp.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:ZATApp.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZATApp.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:ZATApp.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:ZATApp.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:ZATApp.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:ZATApp.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:ZATApp.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:ZATApp.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZATApp.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="T:ZATApp.Controllers.HomeController">
            <summary>
            Manages the home tasks for the user
            </summary>
        </member>
        <member name="M:ZATApp.Controllers.HomeController.Index">
            <summary>
            Controller Starts from this action
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZATApp.Models.AccountingLog">
            <summary>
            Log to store debit and credit information of tghe system
            </summary>
        </member>
        <member name="M:ZATApp.Models.AccountingLog.#ctor(System.Int64)">
            <summary>
            Constructor to initialize values form the database
            </summary>
            <param name="id">primary key</param>
        </member>
        <member name="M:ZATApp.Models.AccountingLog.#ctor(System.Decimal,System.Decimal,ZATApp.Models.Driver)">
            <summary>
            Constructor to add new record to the log 
            </summary>
            <param name="credit">credit w.r.t driver (|Balance-Amount|)</param>
            <param name="debit">debit w.r.t driver (Balance+Amount)</param>
            <param name="driver">User who's transactions will be managed</param>
        </member>
        <member name="P:ZATApp.Models.AccountingLog.AccountLogId">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ZATApp.Models.AccountingLog.Credit">
            <summary>
            credit w.r.t driver (|Balance-Amount|)
            </summary>
        </member>
        <member name="P:ZATApp.Models.AccountingLog.Debit">
            <summary>
            debit w.r.t driver (Balance+Amount)
            </summary>
        </member>
        <member name="P:ZATApp.Models.AccountingLog.EntryTime">
            <summary>
            User who's transactions will be managed
            </summary>
        </member>
        <member name="M:ZATApp.Models.AccountingLog.GetAdminDueCollection">
            <summary>
            Method to get the amount which is due on all drivers
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.AccountingLog.GetAdminCreditedAmount">
            <summary>
            Method to get the amount which is credited by the drivers to the admin
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.AccountingLog.GetAdminDueCollectioByMonth(System.DateTime)">
            <summary>
            Method to get the amount which is in due on the drivers by some month
            </summary>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.AccountingLog.GetAdminCreditByMonth(System.DateTime)">
            <summary>
            Method to get amount credited by the drivers on the admin
            </summary>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.AccountingLog.GetAdminBalance">
            <summary>
            Method to get Balance between Debit and Credit for admin
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZATApp.Models.Common.Location">
            <summary>
            Structure to store location attributes
            </summary>
        </member>
        <member name="M:ZATApp.Models.Common.Location.DistanceFromAPoint(ZATApp.Models.Common.Location,ZATApp.Models.Common.Location.DistanceType)">
            <summary>
            Returns the distance from a location point to this point
            </summary>
            <param name="from">Point from which the distance is being calculated to this point</param>
            <param name="type">Kilometers/Meters</param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.Common.Location.DistanceToAPoint(ZATApp.Models.Common.Location,ZATApp.Models.Common.Location.DistanceType)">
            <summary>
            Returns the distance from a location point to this point
            </summary>
            <param name="to"></param>
            <param name="from">Point from which the distance is being calculated to this point</param>
            <param name="type">Kilometers/Meters</param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.Common.Location.Distance(ZATApp.Models.Common.Location,ZATApp.Models.Common.Location,ZATApp.Models.Common.Location.DistanceType)">
            <summary>
            Returns the distance in miles or kilometers of any two
            latitude / longitude points.
            </summary>
            <param name="pos1"></param>
            <param name="pos2"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.Common.Location.ToRadian(System.Decimal)">
            <summary>
            Convert to Radians.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="T:ZATApp.Models.Common.Location.DistanceType">
            <summary>
            The distance type to return the results in.
            </summary>
        </member>
        <member name="T:ZATApp.Models.Common.RatingAndComments">
            <summary>
            Structure to store ratings and comments given by the rider to the driver after a successfull ride
            </summary>
        </member>
        <member name="T:ZATApp.Models.Driver">
            <summary>
            A user of the system who picks up the ride and does related tasks
            </summary>
        </member>
        <member name="M:ZATApp.Models.Driver.#ctor(ZATApp.Models.User.NameFormat,ZATApp.Models.User.ContactNumberFormat,System.Decimal,ZATApp.Models.Common.Location,System.String)">
            <summary>
            Constructor to add new Driver to the database
            </summary>
            <param name="name">Full Name of the driver</param>
            <param name="contactNumber">Contact Number of the driver</param>
            <param name="creditLimit">Credit Limit to which the driver can use the app, after that the acount will be blocked</param>
            <param name="lastLocation">Last known location of the driver</param>
            <param name="cnic">Unique National ID Card Number</param>
        </member>
        <member name="M:ZATApp.Models.Driver.#ctor(System.Int64)">
            <summary>
            Constructor to initialize a driver's data from the database
            </summary>
            <param name="id">Primary Key</param>
        </member>
        <member name="P:ZATApp.Models.Driver.CNIC_Number">
            <summary>
            National ID Card Number
            </summary>
        </member>
        <member name="P:ZATApp.Models.Driver.CreditLimit">
            <summary>
            Limit of amount, for a driver, to be unpaid to the admin 
            </summary>
        </member>
        <member name="P:ZATApp.Models.Driver.LastLocation">
            <summary>
            Last known Location of the Driver
            </summary>
        </member>
        <member name="P:ZATApp.Models.Driver.IsBooked">
            <summary>
            Flag to check if the driver is booked to a ride or not.
            </summary>
        </member>
        <member name="P:ZATApp.Models.Driver.Balance">
            <summary>
            Balance of the amount of the driver to service provider
            </summary>
        </member>
        <member name="P:ZATApp.Models.Driver.IsCleared">
            <summary>
            Returns true if the Balance of the user is greater than the credit limit
            </summary>
        </member>
        <member name="M:ZATApp.Models.Driver.GetVehicle">
            <summary>
            Method to get the vehicle which owned by the driver
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.Driver.GetRatingAndComments">
            <summary>
            Method to get all ratings and comments given to the driver
            </summary>
            <returns></returns>
        </member>
        <member name="P:ZATApp.Models.Driver.TotalRating">
            <summary>
            Method to get total rating for the driver
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.Driver.AddOrChangeVehicle(ZATApp.Models.Vehicle.RegisterationNumberFormat,System.String,System.Int32,System.Boolean,ZATApp.Models.Vehicle.Colors,ZATApp.Models.VehicleType)">
            <summary>
            Method use to add a new or change if already had a vehicle. Changing a vehicle will delete the previous one.
            </summary>
            <param name="registerationNumber">Registeration Number of the vehicle provided by the government</param>
            <param name="model">model or make of the vehicle</param>
            <param name="engineCC">Engine of the vehicle</param>
            <param name="isAc">Whether if the vehicle is air conditioned</param>
            <param name="color">Color of the card</param>
            <param name="type">Type of the vehicle</param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.Driver.MakeManualTransaction(System.Decimal)">
            <summary>
            Method to make manual transaction of amount for the driver
            </summary>
            <param name="amount">Amount to be transacted</param>
        </member>
        <member name="M:ZATApp.Models.Driver.GetManualTransactions">
            <summary>
            Method to get list of Manual Transactions made by the driver
            </summary>
            <returns>List of Manual Transaction in chronological order</returns>
        </member>
        <member name="M:ZATApp.Models.Driver.MakeMobileAccountTransaction(System.String,System.String,System.Decimal)">
            <summary>
            Method to add mobile account transaction information to the database
            </summary>
            <param name="refNumber">Reference number provided by the Service Provider on transaction</param>
            <param name="mobileAccountService">Name of the Service through which the transaction is being processed</param>
            <param name="amount">Amount to be transacted</param>
        </member>
        <member name="M:ZATApp.Models.Driver.GetAllMobileAccountTransactions">
            <summary>
            Method to get a list of transaction made through the mobile account by the driver
            </summary>
            <returns>List of Mobile Account Transactions in chronological order</returns>
        </member>
        <member name="M:ZATApp.Models.Driver.PickUpRide(ZATApp.Models.Ride,ZATApp.Models.Common.Location)">
            <summary>
            Method to be called when driver picks up a ride from a certain location
            </summary>
            <param name="ride">Ride which is being picked</param>
            <param name="pickUpLocation">Location from which the driver picked the ride</param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.Driver.RegisterIdentityUser(System.String,System.String)">
            <summary>
            Method to register a new account credentials for the user.
            </summary>
            <param name="username">User's unique username</param>
            <param name="password">User's password to get log into the system</param>
        </member>
        <member name="M:ZATApp.Models.Driver.GetAllDrivers">
            <summary>
            Method to check whether if the driver is cleared to Pick-Up a ride
            </summary>
            <returns></returns>
            <summary>
            Method to get list of all drivers present in the database
            </summary>
            <returns>List of drivers in chronological order</returns>
        </member>
        <member name="M:ZATApp.Models.Driver.GetDriver(System.String)">
            <summary>
            Static Method to return Driver by searching the CNIC
            </summary>
            <param name="cnic">Unique National Id Card Number</param>
            <returns></returns>
        </member>
        <member name="T:ZATApp.Models.Exceptions.DbQueryProcessingFailedException">
            <summary>
            Exception will be thrown whenever Database query or stored procedure calling process fails.
            </summary>
        </member>
        <member name="P:ZATApp.Models.Exceptions.DbQueryProcessingFailedException.InnerSQLException">
            <summary>
            Original SQL Exception caused the problem
            </summary>
        </member>
        <member name="T:ZATApp.Models.Exceptions.InvalidArgumentException">
            <summary>
            Exception thrown whenever an unsupported value is captured by a method
            </summary>
        </member>
        <member name="T:ZATApp.Models.Exceptions.InvalidFormatException">
            <summary>
            Exception thrown whenever a string fails a certain format
            </summary>
        </member>
        <member name="T:ZATApp.Models.Exceptions.MalValueArrivedException">
            <summary>
            Exception thrown whenever some unwanted values are found
            </summary>
        </member>
        <member name="T:ZATApp.Models.Exceptions.NotAuthorizedToChangeValueExeption">
            <summary>
            Exception thrown if the value of a veriable is not allowed to change its value
            </summary>
        </member>
        <member name="M:ZATApp.Models.Exceptions.NotAuthorizedToChangeValueExeption.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="variableName"></param>
        </member>
        <member name="T:ZATApp.Models.Exceptions.PrimaryKeyNotForEntityException">
            <summary>
            Exception throw whenever the primary key of an entity will be tried to use to access a sibling entity.
            </summary>
        </member>
        <member name="T:ZATApp.Models.Exceptions.UniqueKeyViolationException">
            <summary>
            This exception will be thrown whenever user violates the unique key constraint for the SQL data
            </summary>
        </member>
        <member name="T:ZATApp.Models.Exceptions.UnsuccessfullProcessException">
            <summary>
            Exception thrown whenever a process don't fulfill as user demand
            </summary>
        </member>
        <member name="T:ZATApp.Models.Exceptions.UpdateUnsuccessfulException">
            <summary>
            Exception thrown whenever the update process remain unsuccessful
            </summary>
        </member>
        <member name="T:ZATApp.Models.Exceptions.UserNotRegisteredException">
            <summary>
            Exception will be thrown when the addition of the user to ASP Identity failed
            </summary>
        </member>
        <member name="T:ZATApp.Models.Exceptions.ValidationPatternNotMatchException">
            <summary>
            Exception will be thrown whenever the string not matches the validation Pattern associated with it.
            </summary>
        </member>
        <member name="T:ZATApp.Models.Exceptions.ValueLengthExceedsException">
            <summary>
            Exception thrown whenever a value enter to the string exceeds to the defined limit
            </summary>
        </member>
        <member name="M:ZATApp.Models.Exceptions.ValueLengthExceedsException.#ctor(System.String,System.Int32)">
            <summary>
            Contructor which initialzes the message
            </summary>
            <param name="value">Entered by the user</param>
            <param name="definedLength">Defined Length of the string</param>
        </member>
        <member name="T:ZATApp.Models.PromoCode">
            <summary>
            Promo Codes are the discount coupons to be added with rides
            </summary>
        </member>
        <member name="M:ZATApp.Models.PromoCode.#ctor(System.Int32)">
            <summary>
            Constructor to initialize values from database
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ZATApp.Models.PromoCode.#ctor(System.String,System.Int16)">
            <summary>
            Constructor to add new Data for promo code
            </summary>
            <param name="code">Unique Code to represent the promotion</param>
            <param name="discountPercent">Percentage of discount to be added to the ride total fare</param>
        </member>
        <member name="P:ZATApp.Models.PromoCode.DiscountPercent">
            <summary>
            Percentage of discount to be added to the total fare
            </summary>
        </member>
        <member name="P:ZATApp.Models.PromoCode.Code">
            <summary>
            Unique code to identify the Promotion
            </summary>
        </member>
        <member name="P:ZATApp.Models.PromoCode.PromoId">
            <summary>
            Primary key
            </summary>
        </member>
        <member name="M:ZATApp.Models.PromoCode.IsUsed(ZATApp.Models.Rider)">
            <summary>
            Method which will return true if the rider has already used a Promo Code
            </summary>
            <param name="rider">User who uses the promo code</param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.PromoCode.GetPromoCode(System.String)">
            <summary>
            Method to get Promo Code by entering the code
            </summary>
            <param name="code">String of unique words represent as a code</param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.PromoCode.GetTotalDiscountsByMonth(System.DateTime)">
            <summary>
            Method to get total discounts given in a certain month
            </summary>
            <param name="month">Month for which the data is collected</param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.PromoCode.GetAllPromoCodes">
            <summary>
            Get list of all promo codes present in the database
            </summary>
            <returns>List of Promo Codes in Chronological Order</returns>
        </member>
        <member name="T:ZATApp.Models.Ride">
            <summary>
            A ride is the main entity around which the whole system revolves. A rider books the ride and a drive picks it up.
            </summary>
        </member>
        <member name="M:ZATApp.Models.Ride.#ctor(System.Int64)">
            <summary>
            Constructor to initialize values from the database
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ZATApp.Models.Ride.#ctor(System.DateTime,ZATApp.Models.Common.Location,ZATApp.Models.Common.Location,ZATApp.Models.Rider,ZATApp.Models.Driver,ZATApp.Models.VehicleType)">
            <summary>
            Constructor to add new ride data to the database
            </summary>
            <param name="bookingTime">Time at which the ride is booked by hte user</param>
            <param name="pickUpLocation">Initial Location from where the driver ahs to pickUp</param>
            <param name="destination">Initial settled destination for the ride</param>
            <param name="rider">User who booked the ride</param>
            <param name="driver">User who picked-up the ride</param>
            <param name="type">Vehicle type of which the rider has ordered the ride</param>
        </member>
        <member name="P:ZATApp.Models.Ride.BookingTime">
            <summary>
            Type at which the rider booked the ride
            </summary>
        </member>
        <member name="P:ZATApp.Models.Ride.VehicleType">
            <summary>
            Type of vehicle on which the rider wants to ride
            </summary>
        </member>
        <member name="P:ZATApp.Models.Ride.Rider">
            <summary>
            User who books the ride
            </summary>
        </member>
        <member name="P:ZATApp.Models.Ride.Driver">
            <summary>
            User who picks up the ride
            </summary>
        </member>
        <member name="P:ZATApp.Models.Ride.Destination">
            <summary>
            Initial location point to which the ride booked the ride
            </summary>
        </member>
        <member name="P:ZATApp.Models.Ride.DropOffLocation">
            <summary>
            Final location at which the rider ends the ride
            </summary>
        </member>
        <member name="P:ZATApp.Models.Ride.IsEnded">
            <summary>
            Status of the ride. Will be true is the ride get ended
            </summary>
        </member>
        <member name="P:ZATApp.Models.Ride.DropOffTime">
            <summary>
            Time at which the driver ended the ride
            </summary>
        </member>
        <member name="P:ZATApp.Models.Ride.PickUpTime">
            <summary>
            Time at which the driver picks up the ride
            </summary>
        </member>
        <member name="P:ZATApp.Models.Ride.PickUpLocation">
            <summary>
            Initial Location from where the driver picks up the ride
            </summary>
        </member>
        <member name="P:ZATApp.Models.Ride.RideId">
            <summary>
            Primay Key
            </summary>
        </member>
        <member name="P:ZATApp.Models.Ride.IsCanceled">
            <summary>
            Flag, that will be true if the ride has been canceled
            </summary>
        </member>
        <member name="P:ZATApp.Models.Ride.ActivePromo">
            <summary>
            Active Promo Code for this ride
            </summary>
        </member>
        <member name="P:ZATApp.Models.Ride.Route">
            <summary>
            The Route which is used by the ride
            </summary>
        </member>
        <member name="M:ZATApp.Models.Ride.AddCordinateToRoute(ZATApp.Models.Common.Location)">
            <summary>
            Method to add cordinate to the route of the ride
            </summary>
            <param name="cordinate"></param>
        </member>
        <member name="M:ZATApp.Models.Ride.AddPromo(ZATApp.Models.PromoCode)">
            <summary>
            Method to add a promo code to the ride
            </summary>
            <param name="promo">Promo code to be added</param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.Ride.CancelRide">
            <summary>
            Method will be called whenever the user wants to cancel the ride
            </summary>
        </member>
        <member name="M:ZATApp.Models.Ride.EndRide(ZATApp.Models.Common.Location)">
            <summary>
            Method to be called if the user wants to end the ride
            </summary>
            <param name="dropOffLocation">Location at which the ride ends</param>
        </member>
        <member name="M:ZATApp.Models.Ride.GetPaymentSummary">
            <summary>
            Method to get Payment Summary for the ride
            </summary>
            
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.Ride.Pay">
            <summary>
            Method to be called whenever the rider pays for the ride
            Will be un-executed if user tried to pay for more than one time
            </summary>
        </member>
        <member name="M:ZATApp.Models.Ride.TransferRide">
            <summary>
            Method to transfer ride from current driver to new driver
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.Ride.GetFareEstimation(System.Decimal,ZATApp.Models.VehicleType)">
            <summary>
            Method to get Estimated Payment Details for a ride
            </summary>
            <param name="msDistance">Distance in meters</param>
            <param name="type">Type of Vehicle for which want the estimation</param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.Ride.GetActiveRides">
            <summary>
            List of rides which will be active at the current moment
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.Ride.GetTotalCompletedRides">
            <summary>
            Method to get Total Number of completed rides
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZATApp.Models.Ride.PaymentSummary">
            <summary>
            Attributes containing the values of payment for a ride
            </summary>
        </member>
        <member name="T:ZATApp.Models.Ride.RideBookingDetails">
            <summary>
            Attributes containing the values neccessary to book a ride
            </summary>
        </member>
        <member name="P:ZATApp.Models.Ride.RouteDetails.TotalDistance">
            <summary>
            Method to get total distance of the route
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZATApp.Models.Vehicle">
            <summary>
            Driver has a vehicle by which it picks up the ride
            </summary>
        </member>
        <member name="M:ZATApp.Models.Vehicle.#ctor(ZATApp.Models.Vehicle.RegisterationNumberFormat,System.String,System.Int32,System.Boolean,ZATApp.Models.Vehicle.Colors,ZATApp.Models.VehicleType,ZATApp.Models.Driver)">
            <summary>
            Constructor to add a new vehicle
            </summary>
            <param name="registerationNumber">Registeration Number of the vehicle provided by the government</param>
            <param name="model">model or make of the vehicle</param>
            <param name="engineCC">Engine of the vehicle</param>
            <param name="isAc">Whether if the vehicle is air conditioned</param>
            <param name="color">Color of the Vehicle</param>
            <param name="type">Type of the vehicle</param>
            <param name="driver">Driver who owns the vehicle</param>
        </member>
        <member name="M:ZATApp.Models.Vehicle.#ctor(System.Int32)">
            <summary>
            Constructor to initialize values from the database
            </summary>
            <param name="id">Primary Key</param>
        </member>
        <member name="P:ZATApp.Models.Vehicle.Type">
            <summary>
            Type to which the vehicle belongs
            </summary>
        </member>
        <member name="P:ZATApp.Models.Vehicle.Driver">
            <summary>
            Driver who owns the car
            </summary>
        </member>
        <member name="P:ZATApp.Models.Vehicle.EngineCC">
            <summary>
            Engine power of the vehicle
            </summary>
        </member>
        <member name="P:ZATApp.Models.Vehicle.VehicleColor">
            <summary>
            Color of the Vehicle
            </summary>
        </member>
        <member name="P:ZATApp.Models.Vehicle.Model">
            <summary>
            Model or make of the car
            </summary>
        </member>
        <member name="P:ZATApp.Models.Vehicle.RegisterationNumber">
            <summary>
            Registeration Number provided by the government
            </summary>
        </member>
        <member name="P:ZATApp.Models.Vehicle.IsAC">
            <summary>
            Value indicates the air condition in the vehicle
            </summary>
        </member>
        <member name="P:ZATApp.Models.Vehicle.VehicleId">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="M:ZATApp.Models.Vehicle.GetAllVehicles">
            <summary>
            Method to get all vehicles present in the database
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZATApp.Models.Vehicle.RegisterationNumberFormat">
            <summary>
            Vehicle's Registeration Number Format
            </summary>
        </member>
        <member name="T:ZATApp.Models.Vehicle.Colors">
            <summary>
            Vehicle's Colors
            </summary>
        </member>
        <member name="T:ZATApp.Models.Vehicle.Engines">
            <summary>
            Engine's CC for a vehicle 
            </summary>
        </member>
        <member name="T:ZATApp.Models.Fare">
            <summary>
            Fare is associated with every type of ride, will be taken after the ride ends
            </summary>
        </member>
        <member name="M:ZATApp.Models.Fare.#ctor(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.DateTime,ZATApp.Models.VehicleType)">
            <summary>
            Constructor to add new fare info to the database
            </summary>
            <param name="pickUpFare">Fare to be due on a ride pick-up</param>
            <param name="dropOffFare">Fare to be due on a ride drop-off</param>
            <param name="gstPercent">Percent of government applied tax on the ride</param>
            <param name="serviceChargePercent">Percent of charges taken by the service provider on every ride</param>
            <param name="distanceTravelledPerKmFee">Amount to be taken on every km of ride</param>
            <param name="date">Date on which the fare updated</param>
            <param name="type">Type of vehicle on which the fare is applicable</param>
        </member>
        <member name="M:ZATApp.Models.Fare.#ctor(System.Int32)">
            <summary>
            Constructor ro initialize values from the database
            </summary>
            <param name="id">Primary Key</param>
        </member>
        <member name="P:ZATApp.Models.Fare.VehicleType">
            <summary>
            Type of vehicle on which the fare is applicable
            </summary>
        </member>
        <member name="P:ZATApp.Models.Fare.Date">
            <summary>
            Date on which the fare updated for the vehicle type
            </summary>
        </member>
        <member name="P:ZATApp.Models.Fare.DistanceTravelledPerKm">
            <summary>
            Amount taken on per km distance of ride
            </summary>
        </member>
        <member name="P:ZATApp.Models.Fare.ServiceChargesPercent">
            <summary>
            Serivce Charges percentage will be duducted by the admin
            </summary>
        </member>
        <member name="P:ZATApp.Models.Fare.GSTPercent">
            <summary>
            Percentage of Governemnt applied genral sales tax
            </summary>
        </member>
        <member name="P:ZATApp.Models.Fare.DropOffFare">
            <summary>
            Fixed amount taken on every drop-off of the ride
            </summary>
        </member>
        <member name="P:ZATApp.Models.Fare.PickUpFare">
            <summary>
            Fixed amount taken on every pick-up of the ride
            </summary>
        </member>
        <member name="P:ZATApp.Models.Fare.FareId">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="M:ZATApp.Models.Fare.GetAllFares">
            <summary>
            Static Method to get all fares present in the database
            </summary>
            <returns>List of Fares in chronological order</returns>
        </member>
        <member name="T:ZATApp.Models.ManualTransactionLog">
            <summary>
            Manual Transactions recorder
            </summary>
        </member>
        <member name="M:ZATApp.Models.ManualTransactionLog.#ctor(System.Decimal,System.DateTime,ZATApp.Models.Driver)">
            <summary>
            Constructor to add new record for transaction
            </summary>
            <param name="amount">Amount of Transaction</param>
            <param name="dateTime">Date and time of the Transaction</param>
            <param name="driver">User who made the transaction</param>
        </member>
        <member name="M:ZATApp.Models.ManualTransactionLog.#ctor(System.Int64)">
            <summary>
            Constructor to initialize values from the database
            </summary>
            <param name="id">Primary Key</param>
        </member>
        <member name="P:ZATApp.Models.ManualTransactionLog.TransactionId">
            <summary>
            Primary key
            </summary>
        </member>
        <member name="P:ZATApp.Models.ManualTransactionLog.TransactionDateTime">
            <summary>
            Date and Time at which the transaction made
            </summary>
        </member>
        <member name="P:ZATApp.Models.ManualTransactionLog.Amount">
            <summary>
            Amount of transaction
            </summary>
        </member>
        <member name="P:ZATApp.Models.ManualTransactionLog.Driver">
            <summary>
            Driver who made the transaction
            </summary>
        </member>
        <member name="M:ZATApp.Models.ManualTransactionLog.GetAllTransactions">
            <summary>
            Method which returns the list of all transactions made in the system
            </summary>
            <returns>Sorted List of Transactions by date in chronological order</returns>
        </member>
        <member name="T:ZATApp.Models.MobileAccountTransactionLog">
            <summary>
            Transactions done from a mobile acount recorder
            </summary>
        </member>
        <member name="M:ZATApp.Models.MobileAccountTransactionLog.#ctor(System.Int64)">
            <summary>
            Constructor to initialize values from database
            </summary>
            <param name="id">Primary Key</param>
        </member>
        <member name="M:ZATApp.Models.MobileAccountTransactionLog.#ctor(System.String,System.DateTime,System.Boolean,System.String,System.Decimal,ZATApp.Models.Driver)">
            <summary>
            Constructor to add new record to the database
            </summary>
            <param name="refNumber">Reference Number of the tansaction, provided by the service provider</param>
            <param name="dateTime">date and time of transaction to be added to the system</param>
            <param name="isVerified">Status of the transaction. Verified by the Admin on receiving</param>
            <param name="mobileAccountService">Name of the service provider</param>
            <param name="amount">amount of the transaction</param>
            <param name="driver">driver who made the transaction</param>
        </member>
        <member name="P:ZATApp.Models.MobileAccountTransactionLog.TransactionId">
            <summary>
            Primary key
            </summary>
        </member>
        <member name="P:ZATApp.Models.MobileAccountTransactionLog.ReferenceNumber">
            <summary>
            Reference Number provided by the Mobile Acount Service Provider on transaction
            </summary>
        </member>
        <member name="P:ZATApp.Models.MobileAccountTransactionLog.IsVerified">
            <summary>
            Status of the transaction. To be Verified by the Admin.
            </summary>
        </member>
        <member name="P:ZATApp.Models.MobileAccountTransactionLog.MobileAccountServiceProviderName">
            <summary>
            Name of the Service Provider
            </summary>
        </member>
        <member name="P:ZATApp.Models.MobileAccountTransactionLog.Amount">
            <summary>
            Amount to be transacted
            </summary>
        </member>
        <member name="P:ZATApp.Models.MobileAccountTransactionLog.TransactionRegisteredTime">
            <summary>
            Time at which the transaction registered to the system for verification
            </summary>
        </member>
        <member name="P:ZATApp.Models.MobileAccountTransactionLog.Driver">
            <summary>
            Driver who does the transaction
            </summary>
        </member>
        <member name="M:ZATApp.Models.MobileAccountTransactionLog.GetAllMobileAccountTransactions">
            <summary>
            Method to get all mobile account transactions
            </summary>
            <returns>List of Mobile account transactions in chronological order</returns>
        </member>
        <member name="M:ZATApp.Models.MobileAccountTransactionLog.GetAllUnverifiedMobileAccountTransactions">
            <summary>
            Static Method to get all the unverified mobile account transactions
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZATApp.Models.Rider">
            <summary>
            A user of the System who books the ride and does related tasks
            </summary>
        </member>
        <member name="M:ZATApp.Models.Rider.#ctor(ZATApp.Models.User.NameFormat,ZATApp.Models.User.ContactNumberFormat)">
            <summary>
            constructor which adds a new rider to the database
            </summary>
            <param name="name">Full Name of the Rider</param>
            <param name="contactNumber">Contact Number of the Rider</param>
        </member>
        <member name="M:ZATApp.Models.Rider.#ctor(System.Int64)">
            <summary>
            Constructor initializes the values from the database
            </summary>
            <param name="id">Primary key</param>
        </member>
        <member name="M:ZATApp.Models.Rider.BookRide(ZATApp.Models.Ride.RideBookingDetails)">
            <summary>
            Method will be used to book a ride for the rider
            </summary>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.Rider.RateDriver(ZATApp.Models.Common.RatingAndComments,ZATApp.Models.Driver)">
            <summary>
            Method to be used by the rider in order to give ratings to the driver after a successfull ride
            </summary>
            <param name="rating">The rating to be given</param>
            <param name="driver">Driver to be given the ratings</param>
        </member>
        <member name="M:ZATApp.Models.Rider.GetAllRiders">
            <summary>
            Method to get a list of all riders present in the database
            </summary>
            <returns>List of Riders in chronological order</returns>
        </member>
        <member name="T:ZATApp.Models.Sms">
            <summary>
            Class which represent the text sms of the application
            </summary>
        </member>
        <member name="M:ZATApp.Models.Sms.#ctor(System.Int64)">
            <summary>
            constructor to initialize the values from the databse
            </summary>
            <param name="id">primary key</param>
        </member>
        <member name="M:ZATApp.Models.Sms.#ctor(System.DateTime,System.String)">
            <summary>
            A Text Sms to be sent to the user
            </summary>
            <param name="sentDateTime">time at which the sms is being sent</param>
            <param name="body">Textual body of the SMS</param>
        </member>
        <member name="P:ZATApp.Models.Sms.SmsId">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ZATApp.Models.Sms.SentDateTime">
            <summary>
            Date and time at which the sms has been sent
            </summary>
        </member>
        <member name="P:ZATApp.Models.Sms.Body">
            <summary>
            Textual Body of the SMS
            </summary>
        </member>
        <member name="M:ZATApp.Models.Sms.GetReceivers">
            <summary>
            Method to get all the users who have received the SMS
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.Sms.GetAllSms">
            <summary>
            Static method to get all sms present in the database.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZATApp.Models.SubAdmin">
            <summary>
            A user of the system who performs sub-admin tasks
            </summary>
        </member>
        <member name="M:ZATApp.Models.SubAdmin.#ctor(ZATApp.Models.User.NameFormat,ZATApp.Models.User.ContactNumberFormat)">
            <summary>
            constructor which adds a new sub-admin to the database
            </summary>
            <param name="name">Full Name of the sub-admin</param>
            <param name="contactNumber">Contact Number of the sub-admin</param>
        </member>
        <member name="M:ZATApp.Models.SubAdmin.#ctor(System.Int64)">
            <summary>
            Constructor initializes the values from the database
            </summary>
            <param name="id">Primary key</param>
        </member>
        <member name="M:ZATApp.Models.SubAdmin.AddArea(System.String)">
            <summary>
            Method to add area for the Sub-Admin
            </summary>
            <param name="areaName">Name of the area to be alloted</param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.SubAdmin.RemoveArea(ZATApp.Models.SubAdmin.Area)">
            <summary>
            Method to remove an alloted area from the sub-admin
            </summary>
            <param name="area">Area to be removed</param>
        </member>
        <member name="M:ZATApp.Models.SubAdmin.GetAllAreas">
            <summary>
            Method to get all areas alloted to the Sub-Admin
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.SubAdmin.RegisterIdentityUser(System.String,System.String)">
            <summary>
            Method to register a new account credentials for the user.
            </summary>
            <param name="username">User's unique username</param>
            <param name="password">User's password to get log into the system</param>
        </member>
        <member name="M:ZATApp.Models.SubAdmin.GetAllSubAdmins">
            <summary>
            Method to get all sub-admins present in the database
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZATApp.Models.SubAdmin.Area">
            <summary>
            Area for which the SubAdmin Works in
            </summary>
        </member>
        <member name="T:ZATApp.Models.User">
            <summary>
            User is the main entity of the system which interacts with the system in different ways.
            </summary>
        </member>
        <member name="F:ZATApp.Models.User.id">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="M:ZATApp.Models.User.#ctor(ZATApp.Models.User.NameFormat,ZATApp.Models.User.ContactNumberFormat)">
            <summary>
            Constructor to add new user data tuple to the database
            </summary>
            <param name="name">Full Name of the user</param>
            <param name="contactNumber">Contact Number of the user</param>
        </member>
        <member name="M:ZATApp.Models.User.#ctor(System.Int64)">
            <summary>
            Constructor to initialize values of a user from the database
            </summary>
            <param name="id">Primary key</param>
        </member>
        <member name="P:ZATApp.Models.User.UserId">
            <summary>
            Primary key
            </summary>
        </member>
        <member name="P:ZATApp.Models.User.IsBlocked">
            <summary>
            Property's value indicated wheater the user is authorized to use the application or not.
            </summary>
        </member>
        <member name="P:ZATApp.Models.User.FullName">
            <summary>
            Full Name of the user
            </summary>
        </member>
        <member name="P:ZATApp.Models.User.ContactNumber">
            <summary>
            Contact Number of the user
            </summary>
        </member>
        <member name="P:ZATApp.Models.User.IsActive">
            <summary>
            Shows that the user is active on the application
            </summary>
        </member>
        <member name="P:ZATApp.Models.User.Role">
            <summary>
            Role of the user to the application
            </summary>
        </member>
        <member name="M:ZATApp.Models.User.GetApplicationUser">
            <summary>
            Method to get the ASP.Net identity for the user
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.User.SendSms(ZATApp.Models.Sms)">
            <summary>
            Method to send SMS to the user. This method just adds the values into the database, 
            in order to send SMS, there should be some service connected to the system and implement its method.
            </summary>
            <param name="sms">Text Sms to be sent</param>
        </member>
        <member name="M:ZATApp.Models.User.ReceivedSms">
            <summary>
            Method to get the list of SMS received by the user
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.User.RegisterIdentityUser(ZATApp.Models.User.ApplicationRoles,System.String,System.String)">
            <summary>
            Method to register a new account credentials for the user.
            </summary>
            <param name="role">User's role to the application</param>
            <param name="username">User's unique username</param>
            <param name="password">User's password to get log into the system</param>
        </member>
        <member name="M:ZATApp.Models.User.ResetPassword(System.String)">
            <summary>
            Method to reset password for the user if forgets
            </summary>
            <param name="newPassword">Password which is being set as new</param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.User.MatchCredentials(System.String,System.String)">
            <summary>
            Method to return true if it sucessfully matched the credentials
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.User.ChangePassword(System.String,System.String)">
            <summary>
            Method to change password for the user
            </summary>
            <param name="oldPassword">Old Password to verify</param>
            <param name="newPassword">New password user want to set</param>
            
        </member>
        <member name="M:ZATApp.Models.User.GetUser(ZATApp.Models.User.ContactNumberFormat)">
            <summary>
            Method to get user by unique phone number
            </summary>
            <param name="contactNumber"></param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.User.GetAllUsers">
            <summary>
            Method to get all the user tuples present in the database in the form of a list
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.User.GetCompletedRides">
            <summary>
            Method to get Rides Completed by the user
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZATApp.Models.User.ActiveStatus">
            <summary>
            Shows the active status of a user
            </summary>
        </member>
        <member name="P:ZATApp.Models.User.ActiveStatus.IsActive">
            <summary>
            Flag to check the active status
            </summary>
        </member>
        <member name="P:ZATApp.Models.User.ActiveStatus.StatusTime">
            <summary>
            Represents the time at which the user updated it's active status
            </summary>
        </member>
        <member name="T:ZATApp.Models.User.ApplicationRoles">
            <summary>
            Enum which decide the role for the application
            </summary>
        </member>
        <member name="T:ZATApp.Models.User.ContactNumberFormat">
            <summary>
            Class to store user's contact details.
            </summary>
        </member>
        <member name="M:ZATApp.Models.User.ContactNumberFormat.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor to initiate contact number class values
            </summary>
        </member>
        <member name="P:ZATApp.Models.User.ContactNumberFormat.PhoneNumberFormat">
            <summary>
            Method which will return the full phone number.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ZATApp.Models.User.ContactNumberFormat.InternationalFormatedPhoneNumber">
            <summary>
            Method to get phone number in (+xx-xxx-xxxxxxx) format
            </summary>
            <returns></returns>
        </member>
        <member name="P:ZATApp.Models.User.ContactNumberFormat.LocalFormatedPhoneNumber">
            <summary>
            Method to get phone number in (0xxx-xxxxxxx)
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZATApp.Models.User.NameFormat">
            <summary>
            Full name for a person
            </summary>
        </member>
        <member name="P:ZATApp.Models.User.NameFormat.FirstName">
            <summary>
            Person's First Name.
            </summary>
        </member>
        <member name="P:ZATApp.Models.User.NameFormat.LastName">
            <summary>
            Person's Last Name.
            </summary>
        </member>
        <member name="T:ZATApp.Models.VehicleType">
            <summary>
            Type of vehicle i.e. Car, Bike, Auto-Rickshaw
            </summary>
        </member>
        <member name="M:ZATApp.Models.VehicleType.#ctor(System.Int32)">
            <summary>
            Constructor to initialize values from database
            </summary>
            <param name="id">Primary Key</param>
        </member>
        <member name="M:ZATApp.Models.VehicleType.#ctor(System.String,ZATApp.Models.VehicleType.FareInfo)">
            <summary>
            Constructor to add new vehicle type to the database
            </summary>
            <param name="name">Name of the type</param>
            <param name="fareInfo">Information of the fare</param>
        </member>
        <member name="P:ZATApp.Models.VehicleType.TypeId">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:ZATApp.Models.VehicleType.Name">
            <summary>
            Name of the type
            </summary>
        </member>
        <member name="M:ZATApp.Models.VehicleType.UpdateFare(ZATApp.Models.VehicleType.FareInfo)">
            <summary>
            Method to update fare information about the vehicle type
            </summary>
            <param name="fareInfo">Information about fare</param>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.VehicleType.GetCurrentFare">
            <summary>
            Get information about fare associated with the vehicle type currently
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZATApp.Models.VehicleType.GetAllVehicleTypes">
            <summary>
            Method to get all vehicle types present in the database
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
